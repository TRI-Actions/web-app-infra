name: web-app-infra
description: Template file for using github actions with terraform for web infra repos
branding:
  icon: 'chevron-right'
  color: 'blue'

inputs:
  AWS_IAM_Role:
    description: 'Cross Account role arn to assume to deploy infrastructure'
    required: false
    type: String
  SSM_private_keys:
    description: "comma separated list of ssm key locations, no spaces"
    required: false
    type: String
  SSM_pat:
    description: "Location of pat token in SSM"
    required: false
    type: String

runs:
  using: composite
  steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.issue.pull_request && format('refs/pull/{0}/head', github.event.issue.number) || '' }}

    - name: Sign into IAM Role
      if: ${{ inputs.AWS_IAM_Role != '' }}
      uses: aws-actions/configure-aws-credentials@main
      with:
        role-to-assume: ${{ inputs.AWS_IAM_Role }}
        role-session-name: web-app-infra-session
        aws-region: us-east-1

    - name: Sign into Github.com and github enterprise
      shell: bash
      run: |
        mkdir -p ~/.ssh
        iter=0
        IFS=',' read -ra ITEMS <<< "${SSM_PRIVATE_KEYS}"
        eval "$(ssh-agent -s)"
        for key in "${ITEMS[@]}"; do
          aws --region us-east-1 ssm get-parameters --name "${key}" --with-decryption --query Parameters[0].Value --output text > ~/.ssh/id_rsa_${iter}
          chmod 600 ~/.ssh/id_rsa_${iter}
          echo -e "Host *\n  IdentityFile ~/.ssh/id_rsa_${iter}\n  StrictHostKeyChecking no" >> ~/.ssh/config
          iter=$((iter + 1))
        done

        if [[ -n "${SSM_PAT}" ]]; then
          GITHUB_TOKEN=$(aws --region us-east-1 ssm get-parameters --name "${SSM_PAT}" --with-decryption --query Parameters[0].Value --output text)
          git config --global url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
        fi
      working-directory: ${{ github.workspace }}
      env:
        SSM_PRIVATE_KEYS: ${{ inputs.SSM_private_keys }}
        SSM_PAT: ${{ inputs.SSM_pat }}

    - name: Check if current branch is behind main
      uses: actions/github-script@v7
      with:
        script: |

          let head, base;

          if (context.eventName === 'pull_request') {

            head = context.payload.pull_request.head.ref;
            base = context.payload.pull_request.base.ref;
          } else if (context.eventName === 'issue_comment' && context.payload.issue.pull_request) {

            const prNumber = context.payload.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            head = pr.head.ref;
            base = pr.base.ref;
          }

          console.log(`Comparing ${base}...${head}`);

          const result = await github.rest.repos.compareCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base,
            head,
          });

          if (result.data.status === 'behind' || result.data.status === 'diverged') {
            const output = `❌ The branch '${head}' is behind 'main' by ${result.data.behind_by} commit(s). Please perform git pull to merge branch with main`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            core.setFailed(`❌ The branch '${head}' is behind 'main' by ${result.data.behind_by} commit(s). Please perform git pull to merge branch with main`);
          } else {
            console.log(`✅ The branch '${head}' is up-to-date with 'main'.`);
          }

    - name: Setup Terraform
      uses: TRI-Actions/setup-terraform@v0.0.1
      with:
        terraform_wrapper: true

    - name: Get Head Sha
      id: sha
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          const headSha = pr.data.head.sha;
          core.setOutput('sha', headSha)

    - name: Create  config status check
      uses: actions/github-script@v7
      id: config_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'GetConfig',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)

    - name: Parse manifest file
      id: parse-yaml
      uses: TRI-Actions/parse-yaml@v0.0.1
      with:
        file_path: manifest.yaml

    - name: Run pre-commit checks
      if: ${{ !contains(github.event.comment.body, 'GithubDeploy') }}
      uses: TRI-Actions/pre-commit-checks@main

    - name: Get label
      id: get-label
      uses: actions/github-script@v7
      with:
        script: |
          const { data: labels } = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          // We should check if the label is correct too.
          // It should be an environment name and if not we can send a comment to warn users that they added a wrong label
          if (labels.length == 0) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Your pull request is missing the label. Please add the label of environment you want to deploy! (i.e staging)`
            })
            core.setFailed('Missing label!');
          } else {
            core.setOutput('environment', labels[0].name);
          }
    - name: Update config status check
      if: ${{ always() }}
      uses: actions/github-script@v7
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.config_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.get-label.conclusion }}'
          })
    ##############################################
    #                                            #
    #            Before Scripts                  #
    #                                            #
    ##############################################

    - name: Create before status check
      if: steps.parse-yaml.outputs.app_build_before_terraform_enabled == 'true'
      uses: actions/github-script@v7
      id: before_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'BeforeScripts',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)

    - name: Run scripts in before_scripts
      if: steps.parse-yaml.outputs.app_build_before_terraform_enabled == 'true'
      id: before_scripts
      uses: TRI-Actions/run-script@Output_removed
      with:
        path: app_build_scripts/before_scripts
      env:
        environment: ${{ steps.get-label.outputs.environment }}
        triggeredByComment: ${{ contains(github.event.comment.body, 'GithubDeploy') }}

    - name: Post before script outputs and update status check
      if: steps.parse-yaml.outputs.app_build_before_terraform_enabled == 'true' && always() && (steps.before_scripts.conclusion == 'success' || steps.before_scripts.conclusion == 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          const formatDate = () => {
            return new Date().toISOString()
          }
          let logs = ''
          try {
            logs = fs.readFileSync('${{ steps.before_scripts.outputs.log_path }}', 'utf8');
          } catch (e) {
            logs = 'Failed to read log file.';
          }
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">logs</a>.'
          const std_out = logs.length > 65000 ? "...\n" + logs.substring(logs.length - 65000) : logs
          const truncated_output = logs.length > 65000 ? "Output is too long and was truncated. You can see the full output in " + run_link + "<br /><br />" : ""
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.before_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.before_scripts.conclusion }}'
          })

          const output = `Run [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          #### Before Scripts Output 🖌
          <details><summary>Before Scripts Output</summary>

          ~~~
          ${std_out}
          ~~~

          ${truncated_output}
          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    ##############################################
    #                                            #
    #            Terraform Plan                  #
    #                                            #
    ##############################################

    - name: Create plan status check
      uses: actions/github-script@v7
      id: plan_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'TerraformPlan',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)

    - name: Setup env
      shell: bash
      run: |
        sed -i 's/$env/${{ steps.get-label.outputs.environment }}/g' backend.tf
      working-directory: terraform

    - name: Terraform fmt
      id: fmt
      shell: bash
      run: terraform fmt -check
      continue-on-error: false
      working-directory: terraform

    - name: Terraform Init
      id: init
      shell: bash
      run: terraform init
      working-directory: terraform

    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color
      working-directory: terraform

    - name: Terraform - Plan
      id: plan
      shell: bash
      run: |
        set +e
        check_lock() {
          ERROR_OUTPUT=$(terraform plan -json -var-file globals/globals.tfvars -var-file ${{ steps.get-label.outputs.environment }}/${{ steps.get-label.outputs.environment }}.tfvars 2>&1)
          if [[ $ERROR_OUTPUT == *"Error acquiring the state lock"* ]]; then
            LOCK_ID=$(echo $ERROR_OUTPUT | jq -r .diagnostic.detail | grep -A 1 "Lock Info" | awk '/ID:/ {print $2; exit}')
            echo "State is locked. Lock ID:"
            echo "$LOCK_ID"

            echo "Attempting to unlock terraform state"
            if terraform force-unlock --force "${LOCK_ID}"; then
              echo "Terraform state has been successfully unlocked!"
              echo "Running plan again.."
              terraform plan -no-color -var-file globals/globals.tfvars -var-file ${{ steps.get-label.outputs.environment }}/${{ steps.get-label.outputs.environment }}.tfvars -out=${GITHUB_WORKSPACE}/plan.tfplan
              terraform show -no-color ${GITHUB_WORKSPACE}/plan.tfplan > ${GITHUB_WORKSPACE}/plan.out
            else
              echo "Failed to unlock the state."
              return 1
            fi
          elif [[ $ERROR_OUTPUT == *"Error:"* ]]; then
            echo "Error occurred while checking Terraform state:"
            echo "$ERROR_OUTPUT"
            return 1
          else
            echo "State is not locked. No action needed."
            terraform plan -no-color -var-file globals/globals.tfvars -var-file ${{ steps.get-label.outputs.environment }}/${{ steps.get-label.outputs.environment }}.tfvars -out=${GITHUB_WORKSPACE}/plan.tfplan
            terraform show -no-color ${GITHUB_WORKSPACE}/plan.tfplan > ${GITHUB_WORKSPACE}/plan.out
          fi
        }
        check_lock
      working-directory: terraform

    - name: Post plan outputs and update status check
      if: always() && !contains(github.event.comment.body, 'GithubDeploy')
      uses: actions/github-script@v7
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.plan_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.plan.conclusion }}'
          })
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('plan.out', 'utf8').toString()
          const plan = plan_file.length > 65000 ? "...\n" + plan_file.substring(plan_file.length - 65000) : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can see full plan in " + run_link + "<br /><br />" : ""
          const output = `Run [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          #### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          ~~~
          ${{ steps.validate.outputs.stdout }}
          ~~~

          </details>

          #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          ~~~
          ${plan}
          ~~~

          </details>

          Respond with \`GithubDeploy\` to deploy and merge changes.
          ${truncated_message}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    ##############################################
    #                                            #
    #            Terraform Apply                 #
    #                                            #
    ##############################################

    - name: Create apply status check
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      uses: actions/github-script@v7
      id: apply_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'TerraformApply',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)
    - name: Terraform - Apply
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      id: apply
      shell: bash
      run: |
        set +e
        check_lock() {
          ERROR_OUTPUT=$(terraform plan -json -var-file globals/globals.tfvars -var-file ${{ steps.get-label.outputs.environment }}/${{ steps.get-label.outputs.environment }}.tfvars 2>&1)
          if [[ $ERROR_OUTPUT == *"Error acquiring the state lock"* ]]; then
            LOCK_ID=$(echo $ERROR_OUTPUT | jq -r .diagnostic.detail | grep -A 1 "Lock Info" | awk '/ID:/ {print $2; exit}')
            echo "State is locked. Lock ID:"
            echo "$LOCK_ID"

            echo "Attempting to unlock terraform state"
            if terraform force-unlock --force "${LOCK_ID}"; then
              echo "Terraform state has been successfully unlocked!"
              echo "Trying to apply again.."
              terraform apply -auto-approve -no-color ${GITHUB_WORKSPACE}/plan.tfplan > ${GITHUB_WORKSPACE}/apply.out
            else
              echo "Failed to unlock the state."
              return 1
            fi
          elif [[ $ERROR_OUTPUT == *"Error:"* ]]; then
            echo "Error occurred while checking Terraform state:"
            echo "$ERROR_OUTPUT"
            return 1
          else
            echo "State is not locked. No action needed."
            terraform apply -auto-approve -no-color ${GITHUB_WORKSPACE}/plan.tfplan > ${GITHUB_WORKSPACE}/apply.out
          fi
        }
        check_lock
      working-directory: terraform

    - name: Post apply outputs and update status check
      if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') && always() }}
      uses: actions/github-script@v7
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.apply_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.apply.conclusion }}'
          })
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const apply_out_file = fs.readFileSync('apply.out', 'utf8').toString()
          const apply_out = apply_out_file.length > 65000 ? "...\n" + apply_out_file.substring(apply_out_file.length - 65000) : apply_out_file
          const truncated_message = apply_out_file.length > 65000 ? "Output is too long and was truncated. You can see full apply output in " + run_link + "<br /><br />" : ""
          const output = `Run [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          #### Terraform Apply 📖 \`${{ steps.apply.outcome }}\`

          <details><summary>Show Apply Output</summary>

          ~~~
          ${apply_out}
          ~~~

          </details>
          ${truncated_message}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    ##############################################
    #                                            #
    #            After Scripts                   #
    #                                            #
    ##############################################

    - name: Create after status check
      if: steps.parse-yaml.outputs.app_build_after_terraform_enabled == 'true'
      uses: actions/github-script@v7
      id: after_status_check
      with:
        script: |
          const formatDate = () => {
            return new Date().toISOString()
          }
          const check = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'AfterScripts',
            head_sha: `${{steps.sha.outputs.sha}}`,
            started_at: formatDate(),
            status: 'in_progress'
          })
          core.setOutput('CHECK_ID', check.data.id)
    - name: Run scripts in after_scripts
      if: steps.parse-yaml.outputs.app_build_after_terraform_enabled == 'true'
      id: after_scripts
      uses: TRI-Actions/run-script@Output_removed
      with:
        path: app_build_scripts/after_scripts
      env:
        environment: ${{ steps.get-label.outputs.environment }}
        triggeredByComment: ${{ contains(github.event.comment.body, 'GithubDeploy') }}

    - name: Post after script outputs and update status check
      if: steps.parse-yaml.outputs.app_build_after_terraform_enabled == 'true' && always() && (steps.after_scripts.conclusion == 'success' || steps.after_scripts.conclusion == 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          let logs = ''
          try {
            logs = fs.readFileSync('${{ steps.after_scripts.outputs.log_path }}', 'utf8');
          } catch (e) {
            logs = 'Failed to read log file.';
          }
          const formatDate = () => {
            return new Date().toISOString()
          }
          github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id:  '${{ steps.after_status_check.outputs.CHECK_ID }}',
            status: 'completed',
            completed_at: formatDate(),
            conclusion: '${{ steps.after_scripts.conclusion }}'
          })
          const fs = require('fs')
          const output = `Run [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          #### After Scripts Output 🖌
          <details><summary>After Scripts Output</summary>

          ~~~
          ${logs}
          ~~~

          </details>`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Merge Branch
      uses: actions/github-script@v7
      if: ${{ job.status == 'success' && github.event.issue.pull_request && contains(github.event.comment.body, 'GithubDeploy') }}
      with:
        script: |
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
